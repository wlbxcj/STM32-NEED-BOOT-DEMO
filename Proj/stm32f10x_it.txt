; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_it.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -I..\Source\App -I..\Source\BSP -I..\Source\CMSIS -I..\Source\FWlib\inc -I..\Proj -I..\Source\Starup -I..\Source\uCOS_Ports -I..\Source\uCOS_Source -I..\Source\USER -I..\Source\FWlib -I..\Source\Driver -I"D:\Program Files\Keil\ARM\RV31\Inc" -I"D:\Program Files\Keil\ARM\CMSIS\Include" -I"D:\Program Files\Keil\ARM\Inc\ST\STM32F10x" -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_it.crf ..\Source\USER\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;83     *******************************************************************************/
;;;84     void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;85     {
;;;86       /* Go to infinite loop when Bus Fault exception occurs */
;;;87       while (1)
;;;88       {
;;;89       }
;;;90     }
;;;91     
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;124    *******************************************************************************/
;;;125    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;126    {
;;;127    }
;;;128    
                          ENDP


                          AREA ||i.EVAL_COM1_IRQHandler||, CODE, READONLY, ALIGN=1

                  EVAL_COM1_IRQHandler PROC
;;;232    *******************************************************************************/
;;;233    void EVAL_COM1_IRQHandler(void)
000000  4770              BX       lr
;;;234    {
;;;235      //if (USART_GetITStatus(EVAL_COM1, USART_IT_RXNE) != RESET)
;;;236     // {
;;;237        /* Send the received data to the PC Host*/
;;;238     //   USART_To_USB_Send_Data();
;;;239     // }
;;;240    
;;;241      /* If overrun condition occurs, clear the ORE flag and recover communication */
;;;242     // if (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_ORE) != RESET)
;;;243     // {
;;;244     //   (void)USART_ReceiveData(EVAL_COM1);
;;;245     // }
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;53     *******************************************************************************/
;;;54     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;55     {
;;;56       /* Go to infinite loop when Hard Fault exception occurs */
;;;57       while (1)
;;;58       {
;;;59       }
;;;60     }
;;;61     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;68     *******************************************************************************/
;;;69     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;70     {
;;;71       /* Go to infinite loop when Memory Manage exception occurs */
;;;72       while (1)
;;;73       {
;;;74       }
;;;75     }
;;;76     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;42     *******************************************************************************/
;;;43     void NMI_Handler(void)
000000  4770              BX       lr
;;;44     {
;;;45     }
;;;46     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;135    *******************************************************************************/
;;;136    void PendSV_Handler(void)
000000  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP


                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;170      */
;;;171    void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173      if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RTC_GetITStatus
000008  2800              CMP      r0,#0
00000a  d00a              BEQ      |L8.34|
;;;174      {
;;;175        /* Clear the RTC Second interrupt */
;;;176        RTC_ClearITPendingBit(RTC_IT_SEC);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RTC_ClearITPendingBit
;;;177    
;;;178    	g_ulBootSecTime++;
000012  4804              LDR      r0,|L8.36|
000014  6801              LDR      r1,[r0,#0]  ; g_ulBootSecTime
000016  1c49              ADDS     r1,r1,#1
000018  6001              STR      r1,[r0,#0]  ; g_ulBootSecTime
;;;179    
;;;180        /* Wait until last write operation on RTC registers has finished */
;;;181        RTC_WaitForLastTask();
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      RTC_WaitForLastTask
                  |L8.34|
;;;182      }
;;;183    }
000022  bd10              POP      {r4,pc}
;;;184    
                          ENDP

                  |L8.36|
                          DCD      g_ulBootSecTime

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;159     */
;;;160    void SDIO_IRQHandler(void)
000000  f7ffbffe          B.W      SD_ProcessIRQSrc
;;;161    {
;;;162      /* 处理 SDIO 全部中断 */
;;;163        SD_ProcessIRQSrc();
;;;164    }
;;;165    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;113    *******************************************************************************/
;;;114    void SVC_Handler(void)
000000  4770              BX       lr
;;;115    {
;;;116    }
;;;117    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;146    *******************************************************************************/
;;;147    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149    	OSIntEnter(); 
000002  f7fffffe          BL       OSIntEnter
;;;150        OSTimeTick(); 
000006  f7fffffe          BL       OSTimeTick
;;;151        OSIntExit();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      OSIntExit
;;;152    }
;;;153    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;191    *******************************************************************************/
;;;192    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
;;;194       uint8 ucData = 0;
;;;195       if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //è?1?ê??óê??D??
000002  4d0e              LDR      r5,|L12.60|
000004  f2405625          MOV      r6,#0x525
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       USART_GetITStatus
000010  2800              CMP      r0,#0
000012  d011              BEQ      |L12.56|
;;;196        {     
;;;197          	ucData = USART_ReceiveData(USART1);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       USART_ReceiveData
00001a  b2c4              UXTB     r4,r0
;;;198            USART_ClearITPendingBit(USART1, USART_IT_RXNE);          //清除中断标志
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       USART_ClearITPendingBit
;;;199    
;;;200    		USART_SendData(USART1, ucData);
000024  4621              MOV      r1,r4
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USART_SendData
                  |L12.44|
;;;201           	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET); 	//μè′yêy?Y・￠?ííê±?
00002c  2180              MOVS     r1,#0x80
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       USART_GetFlagStatus
000034  2800              CMP      r0,#0
000036  d0f9              BEQ      |L12.44|
                  |L12.56|
;;;202        }
;;;203    
;;;204    }
000038  bd70              POP      {r4-r6,pc}
;;;205    
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      0x40013800

                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;219    *******************************************************************************/
;;;220    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  4770              BX       lr
;;;221    {
;;;222      //USB_Istr();
;;;223    }
;;;224    #endif /* STM32F10X_CL */
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L14.0|
;;;98     *******************************************************************************/
;;;99     void UsageFault_Handler(void)
000000  e7fe              B        |L14.0|
;;;100    {
;;;101      /* Go to infinite loop when Usage Fault exception occurs */
;;;102      while (1)
;;;103      {
;;;104      }
;;;105    }
;;;106    
                          ENDP

